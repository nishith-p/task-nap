generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

//User (1) - (n) Project (be owner)
//User (n) - (m) Project (be member)
//Project (1) - (n) Task
//User (1) - (n) Task (be owner)
//User (1) - (n) Task (be assigned)

model User {
    id               String           @id @default(uuid())
    userExternalId   Int              @default(autoincrement())
    email            String           @unique
    password         String
    firstName        String
    lastName         String
    profilePic       String?
    role             UserRole         @default(MEMBER)
    createdAt        DateTime         @default(now()) @db.Timestamptz(3)
    updatedAt        DateTime         @updatedAt @db.Timestamptz(3)
    projectsCreated  Project[]
    projectsAssigned ProjectMembers[]
    tasksCreated     Task[]           @relation("tasksCreated")
    tasksAssigned    Task[]           @relation("tasksAssigned")
    token            String?
}

// model Token {
//     id        String   @id @default(uuid())
//     token     String
//     createdAt DateTime @default(now()) @db.Timestamptz(3)
//     user      User     @relation(fields: [userId], references: [id])
//     userId    String
// }

model Project {
    id                String           @id @default(uuid())
    projectExternalId Int              @default(autoincrement())
    projectName       String
    projectOwner      User             @relation(fields: [projectOwnerId], references: [id])
    projectOwnerId    String
    projectDesc       String
    projectCategory   ProjectCategory
    projectStatus     ProjectStatus    @default(OPEN)
    createdAt         DateTime         @default(now()) @db.Timestamptz(3)
    updatedAt         DateTime         @updatedAt @db.Timestamptz(3)
    tasks             Task[]
    projectMembers    ProjectMembers[]
}

model Task {
    id             String       @id @default(uuid())
    taskExternalId Int          @default(autoincrement())
    taskTitle      String
    taskDesc       String
    taskCategory   TaskCategory @default(BUG)
    taskStatus     TaskStatus   @default(BACKLOG)
    taskCreator    User         @relation("tasksCreated", fields: [taskCreatorId], references: [id])
    taskCreatorId  String
    taskAssignee   User         @relation("tasksAssigned", fields: [taskAssigneeId], references: [id])
    taskAssigneeId String
    taskPriority   TaskPriority @default(LOW)
    taskEstimate   Float
    project        Project      @relation(fields: [projectId], references: [id])
    projectId      String
    createdAt      DateTime     @default(now()) @db.Timestamptz(3)
    updatedAt      DateTime     @updatedAt @db.Timestamptz(3)
    userId         String
}

model ProjectMembers {
    project   Project @relation(fields: [projectId], references: [id])
    projectId String
    members   User    @relation(fields: [memberId], references: [id])
    memberId  String

    @@id([projectId, memberId])
}

enum UserRole {
    MEMBER
    MANAGER
    ADMIN
}

enum ProjectCategory {
    SOFTWARE
    MARKETING
    BUSINESS
}

enum ProjectStatus {
    OPEN
    CLOSE
}

enum TaskCategory {
    BUG
    CR
    FR
}

enum TaskStatus {
    BACKLOG
    SELECTED
    INPROGRESS
    DONE
}

enum TaskPriority {
    LOW
    MEDIUM
    HIGH
    CRITICAL
}
